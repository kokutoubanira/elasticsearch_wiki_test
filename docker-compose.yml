version: '3.7'
services:
  es01:
    #image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
    build: ./Docker/
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - TZ=Asia/Tokyo
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    restart: unless-stopped
    networks: 
      elastic:

  es02:
    #image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
    build: ./Docker/
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - TZ=Asia/Tokyo
    ports:
      - 9300:9200
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks: 
      elastic:

  es03:
    #image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
    build: ./Docker/
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - TZ=Asia/Tokyo
    ports:
      - 9400:9200
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks: 
      elastic:

  cerebro:
    image: lmenezes/cerebro:0.9.3
    container_name: cerebro
    ports:
      - 9000:9000
    environment:
      TZ: Asia/Tokyo
      HOSTS: >
        ES1,http://es01:9200
        ES2,httr-compose downtp://es03:9200
    links:
      - es01:es01
      - es02:es02
      - es03:es03
    restart: unless-stopped
    networks: 
      elastic:

  cadvisor:
    image: google/cadvisor:canary
    container_name: cadvisor
    ports:
      - 8080:8080
    environment: 
      - TZ=Asia/Tokyo
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped
    networks: 
      elastic:

  prometheus:
    image: prom/prometheus:main
    container_name: prometheus
    environment: 
      - TZ=Asia/Tokyo
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alert.rules.yaml:/etc/prometheus/alert.rules.yaml
    ports:
      - 9090:9090
    links:
      - es01:es01
      - es02:es02
      - es03:es03
      - cadvisor:cadvisor
      - node-exporter:node-exporter
      - blackbox_exporter:blackbox_exporter
    restart: unless-stopped
    networks: 
      elastic:

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    ports:
      - '3000:3000'
    links:
      - prometheus:prometheus
      - cadvisor:cadvisor
    environment:
      GF_SECURITY_ADMIN_USER: yourname
      GF_SECURITY_ADMIN_PASSWORD: password
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_USERS_ALLOW_ORG_CREATE: "false"
      TZ: Asia/Tokyo
    volumes:
      - grafana_storage:/var/lib/grafana
      - ./grafana_provisioning/:/etc/grafana/provisioning/
    restart: unless-stopped
    networks: 
      elastic:

  node-exporter:
    image: prom/node-exporter:v1.2.0
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    environment: 
      - TZ=Asia/Tokyo
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - '9100:9100'
    restart: unless-stopped
    networks: 
      elastic:

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    hostname: alertmanager
    environment: 
      - TZ=Asia/Tokyo
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - "--config.file=/etc/alertmanager/config.yaml"
      # https://example.com/alertmanager のようにサブディレクトリを切る場合
      #- "--web.route-prefix=/alertmanager"
    restart: unless-stopped
    networks: 
      elastic:
    ports:
      - 9093:9093
  blackbox_exporter:
    image: prom/blackbox-exporter:latest
    volumes:
      - ./blackbox_exporter/config.yml:/etc/blackbox_exporter/config.yml
    command:
      - "--config.file=/etc/blackbox_exporter/config.yml"
    ports:
      - 9115:9115
    networks: 
      elastic:
    
volumes:
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local
  grafana_storage:
    driver: local
  grafana_provisioning:
    driver: local
    
networks:
  elastic:
    external: true
    driver: bridge
    